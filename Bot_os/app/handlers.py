from app.imports import *
from app.states import *
from app.config import *
from app.methods import *
from bot import *

# region‚Äã‚Äå‚Äå‚Äç ‚Å°‚Å¢‚Å¢‚Å£Need methods‚Å°‚Äã

async def while_transfer_ready_army(user_id, ready, call):
    global ready_army
    while ready_army:
        is_ready = await chek_is_ready(user_id)
        if is_ready is True:
            try:
                cursor.execute(
                    "UPDATE army SET ready = ready + ? WHERE user_id = ?",
                    (int(ready), int(user_id))
                )
                await call.bot.send_message(user_id, "üîù–í–∞—à–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—Ä–º–∏–∏ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 1")
                conn.commit()
                # print(F"Commited: ready:{ready}, user_id:{user_id}")
            except Exception as e:
                print(f"[ERROR]:update ready: {e}")
        elif is_ready is False:
            cursor.execute("UPDATE army SET ready = 100 WHERE user_id = ?", (int(user_id),))
            await call.bot.send_message(user_id, "ü™ñ–í–∞—à–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É–∂–µ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç 100!")
            army_ready_state[user_id] = "unblocked"
            ready_army = False
            conn.commit()
        elif is_ready == "error":
            army_ready_state[user_id] = "unblocked"
            ready_army = False
            print("Error in transfer_ready_army")
            
        sleepfor = random.randint(20, 40)
        await asyncio.sleep(sleepfor)

async def start_population_activate(chat_id, user_id):
    global pop_t
    # print(pop_t)
    while pop_t:
        country = await get_country_from_users(user_id)
        params = await get_country_params(country)
        economy = params[2] // 100000
        population_max = (params[3] // 50) + (params[4] // 5) * (params[5] // 40) + economy
        population_min = (params[3] // 100) + (params[4] // 15) * (params[5] // 40) + economy
        if population_max >= 9000:
            population_max = POPULATION_MAX
        if population_min >= 5000:
            population_min = POPULATION_MIN
        population = random.randint(population_min, population_max)
        # print(f"Population Before: {population}")
        population_bonus = params[6]
        population_bonus_amount = population * population_bonus
        population += population_bonus_amount
        # print(f"Popualtion after bonus:{population}")
        
        if population <= 0:
            print(population)
            population = random.randint(1, 2)
            # print("start min popualtion")
        await transfer_population(population, country, True)
        await bot.send_message(chat_id=chat_id, text=f"üë©‚Äçüçº –ë—ã–ª–æ —Ä–æ–∂–¥–µ–Ω–æ {population} –ª—é–¥–µ–π –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}.")
        
        sleepfor = random.randint(20, 40)
        await asyncio.sleep(sleepfor)
        
async def start_production_activate(chat_id, user_id):

    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
    def calculate_income_params(params):
        economy_max = params[2] // 45
        population_max = params[3] // 30
        happiness_max = params[4] // 24
        income_max = economy_max + population_max * happiness_max

        econome_min = params[2] // 80
        population_min = params[3] // 50
        happiness_min = params[4] // 48
        income_min = econome_min + population_min * happiness_min

        return income_min, income_max

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while fm_t:
        country = await get_country_from_users(user_id)
        params = await get_country_params(country)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        if not params or len(params) < 4:
            logging.error(f"Invalid params for country {country}: {params}")
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            continue

        income_min, income_max = calculate_income_params(params)
        if income_max >= PRODUCTION_MAX:
            income_max = PRODUCTION_MAX
        income = random.randint(income_min, income_max)
        
        await transfer_money(income, user_id, True)
        await bot.send_message(chat_id=chat_id, text=f"üí∞ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ {income} –º–æ–Ω–µ—Ç –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}.")
        
        sleepfor = random.randint(20, 40)
        await asyncio.sleep(sleepfor)

async def invest_task(country, money, chat_id):
    Invest = True
    numOfInvest = 0
    economy_min = money // 20
    economy_max = money // 10
    economy_bonus_get = await get_country_params(country=country)
    economy_bonus = economy_bonus_get[7]
    while Invest:
        numOfInvest += 1
        economy = random.randint(economy_min, economy_max)
        economy_bonus_amount = economy * economy_bonus
        economy += economy_bonus_amount
        if numOfInvest == 6:
            Invest = False
            break
        try:
            cursor.execute("UPDATE countries SET economy = economy + ? WHERE name = ?", (economy, country))
            await bot.send_message(chat_id=chat_id, text=f"üíπ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ {economy} –µ–¥–∏–Ω–∏—Ü —ç–∫–æ–Ω–æ–º–∏–∫–∏ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã! üí∞")
        except BaseException as e:
            await bot.send_message(chat_id=chat_id, text="üö® –û—à–∏–±–∫–∞: " + str(e))
            Invest = False
            break
        
        sleepfor = random.randint(20, 40)
        await asyncio.sleep(sleepfor)
        
async def start_party_activate(chat_id, user_id, country, money):
    global party_t
    numOfParty = 0
    params = await get_country_params(country)
    happiness_min = math.ceil(money / 2000)
    happiness_max = math.ceil(money / 500)
    happiness_bonus = params[8]
    party_t = True
    await transfer_happiness(30, country, False)

    while party_t:
        current_happiness = await get_country_params(country)

        check = await party_checks(numOfParty, current_happiness, user_id, country)
        numOfParty += 1
        # print(F"Check:{check}, NumOfParty:{numOfParty}")
        if check:
            happiness = random.randint(happiness_min, happiness_max)
            happiness_bonus_amount = happiness * happiness_bonus
            happiness += happiness_bonus_amount
            await bot.send_message(chat_id=chat_id, text=f"üìà –°—á–∞—Å—Ç—å–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ {happiness}! üé≠")
            await transfer_happiness(happiness, country, True)  # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
            
            sleepfor = random.randint(3, 5)
            await asyncio.sleep(sleepfor)
        else:
            await bot.send_message(chat_id=chat_id, text="üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
            break
    
async def party_checks(numOfParty, current_happiness, user_id, country):
    first_check = False
    second_check = False
    if numOfParty >= 8:
                await bot.send_message(chat_id=user_id, text="üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
                party_t = False
                party_state[user_id] = "unblocked"
                return
    else:
        first_check = True
    if current_happiness[4] >= 100:
                await bot.send_message(chat_id=user_id, text="üéä –°—á–∞—Å—Ç—å–µ –¥–æ—Å—Ç–∏–≥–ª–æ 100%! –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                party_t = False
                party_state[user_id] = "unblocked"
                await set_happy_max(country)
    else:
        second_check = True
    if first_check and second_check:
        return True
    else:
        return False

# endregion

# region 2 ‚Å°‚Å¢‚Å£‚Å£‚Äã‚Äå‚Äç‚ÄåInCountryMethods‚Å°‚Äã

@r.callback_query(F.data == "invest")
async def investigate(callback_query: CallbackQuery, state: FSMContext):
    is_user = await chek_is_user(callback_query.from_user.id)
    if is_user is False:
        await callback_query.message.answer("üö´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    await callback_query.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:\nüö´–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Investigate.num)
    
@r.message(Investigate.num)
async def process_investigate(message: Message, state: FSMContext):
    global numOfInvest, Invest
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        Invest = False
        await state.clear()
        return
    is_user = await chek_is_user(message.from_user.id)
    money = await get_money(message.from_user.id)
    country = await get_country_from_users(message.from_user.id)
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    try:
        if money < int(message.text):
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        try:
            await transfer_money(int(message.text), message.from_user.id, False)
            asyncio.create_task(invest_task(country, int(message.text), message.from_user.id))
            await message.reply("üíº –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥.")
            await state.clear()
        except BaseException as e:
            await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
            Invest = False
            await state.clear()
            return
    except BaseException as e:
        await message.reply("ÔøΩ –û—à–∏–±–∫–∞: " + str(e))
        Invest = False
        await state.clear()
        conn.commit()
        return
    
@r.callback_query(F.data == "start_party_happy")
async def start_party(callback_query: CallbackQuery, state: FSMContext):
    global party_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    country_name = await get_country_from_users(user_id=user_id)
    country = await get_country_params(country=country_name)
    happiness = country
    
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        party_t = False
        return
    
    if user_id in user_states2 and user_states2[user_id] == "blocked":
        await callback_query.answer("–ü—Ä–∞–∑–¥–Ω–∏–∫ —É–∂–µ –Ω–∞—á–∞—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 7 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞")
        return
    
    party_state[user_id] = "blocked"
    
    await callback_query.message.answer("üíµ–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –ø–æ—Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫: ")
    await state.set_state(Party.amount)
    
@r.message(Party.amount)
async def party_accept_procces(message: Message, state: FSMContext):
    global party_t
    user_id = message.from_user.id
    chat_id = message.chat.id
    is_user = await chek_is_user(user_id)
    
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        party_t = False
        return
    
    money = await get_money(message.from_user.id)
    country = await get_country_from_users(message.from_user.id)
    try:
        if money < int(message.text):
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.")
            return
        if int(message.text) <= 500:
            await message.reply("üò°–í–∞—à–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤–∑–±—É—à–µ–≤–∞–ª–æ—Å—å –∏–∑-–∑–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ -10 —Å—á–∞—Å—Ç—å—è")
            await transfer_happiness(10, country, False)
            return
            
        try:
            await transfer_money(int(message.text), message.from_user.id, False)
            asyncio.create_task(start_party_activate(chat_id, user_id, country, int(message.text)))
            await message.reply("–ü—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞—á–∞—Ç–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.")
            party_t = True
            await state.clear()
        except BaseException as e:
            await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
            party_t = False
            await state.clear()
            return
    except BaseException as e:
        await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
        party_t = False
        await state.clear()
        conn.commit()
        return

# endregion
    
# region 3‚Äã‚Äå‚Äç‚Äå ‚Å°‚Å£‚Å£‚Å¢earn money and product‚Å°‚Äã

@r.message(F.text.in_({"–∫–æ–ø–∞—Ç—å", "–ö–æ–ø–∞—Ç—å", "rjgfnm", "Rjgfnm"}))
async def kop(message: Message):
    global kol_kop
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if kol_kop is None:
        kol_kop = 0
    if kol_kop < 10:
        kol_kop += 1
    elif kol_kop >= 10:
        await message.reply("‚õè –í—ã —É–∂–µ –∫–æ–ø–∞–ª–∏ 10 —Ä–∞–∑.")
        return
    cursor.execute("UPDATE users SET money = money + 100 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.reply("üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100 –º–æ–Ω–µ—Ç.", reply_markup=keyboard_start)
    
@r.callback_query(F.data == "start_production")
async def money_from_country(callback_query: types.CallbackQuery):
    global fm_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        fm_t = False
        return
    
    if user_id in user_states and user_states[user_id] == "blocked":
        await callback_query.answer("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ.")
        return
    
    user_states[user_id] = "blocked"
    
    await callback_query.answer("üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞—Ç–æ.\n‚è≥–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥.")
    fm_t = True
    asyncio.create_task(start_production_activate(chat_id, user_id))
        
@r.callback_query(F.data == "stop_production")
async def stop_production(callback_query: types.CallbackQuery):
    global fm_t
    await callback_query.answer("üõë –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    fm_t = False
    user_id = callback_query.from_user.id
    
    if user_id not in user_states or user_states[user_id] != "blocked":
        await callback_query.answer("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ.")
        return
    user_states[user_id] = "unblocked"
    
@r.callback_query(F.data == "start_population")
async def start_population(callback_query: types.CallbackQuery):
    global pop_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        fm_t = False
        return
    
    if user_id in user_states2 and user_states2[user_id] == "blocked":
        await callback_query.answer("–†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ.")
        return
    
    user_states2[user_id] = "blocked"
    
    await callback_query.answer("üéÅ –†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞—á–∞—Ç–∞.\n‚è≥–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥.")
    pop_t = True
    asyncio.create_task(start_population_activate(chat_id, user_id))
    
@r.callback_query(F.data == "stop_population")
async def stop_population(callback_query: types.CallbackQuery):
    global pop_t
    await callback_query.answer("üõë –†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    pop_t = False
    user_id = callback_query.from_user.id
    
    if user_id not in user_states2 or user_states2[user_id] != "blocked":
        await callback_query.answer("–†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    user_states2[user_id] = "unblocked"
    
# endregion
    
# region 4 ‚Å°‚Å¢‚Å¢‚Å¢‚Äã‚Äå‚Äå‚Äç‚Äçguest methods‚Å°‚Äã

@r.message(Command("unlogin"))
async def logout_account(message: Message, state: FSMContext):
    global captcha
    
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.answer("üö´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    captcha = await generate_captcha()
    await message.answer(f"ü™™–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞:\n–∫–æ–¥: {captcha}\nüö´–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Logout.captcha)
    
@r.message(Logout.captcha)
async def check_captcha(message: Message, state: FSMContext):
    global captcha
    if message.text.lower() == captcha.lower():
        user_id = message.from_user.id
        await state.clear()
        await message.answer("‚Ü™Ô∏è–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        await ban_user(user_id, user_id)
    elif message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚Ü™Ô∏è–í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑./unlogin")

@r.message(Command("help"))
async def help(message: Message):
    await message.reply("üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                        "/start - üèÅ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                        "/register - üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                        "/invest - üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É\n"
                        "/countries - üåé –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω\n"
                        "–ö–æ–ø–∞—Ç—å - ‚õè –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥\n"
                        "/info - ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n"
                        "/country_info - üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ\n"
                        "/help - ‚ùì –ü–æ–º–æ—â—å", reply_markup=keyboard_start)
    
@r.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f"ID —Ñ–æ—Ç–∞: {message.photo[-1].file_id}")
    
@r.message(Command("map"))
async def show_map(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url="https://www.flickr.com/photos/202286975@N06/54326715216/in/dateposted-public/"))]
        ]
    )
    
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É:", reply_markup=keyboard)
    
@r.message(F.text.startswith('–¥–∞—Ç—å'))
async def give_currency(message: Message):
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.answer("üö´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    if not message.reply_to_message:
        await message.reply("‚Ü™Ô∏è–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("üíµ–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å 100")
            return
        
        amount = int(parts[1])

        if amount <= 0:
            await message.reply("üíµ–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

    except ValueError:
        await message.reply("üíµ–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å 100")
        return

    from_user_id = message.from_user.id
    to_user_id = message.reply_to_message.from_user.id


    cursor.execute(F"SELECT money FROM users WHERE user_id = {message.from_user.id}")
    cur = cursor.fetchone()
    money = cur[0]
    if money < amount:
        await message.reply("üíµ–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    
@r.message(Command("list_economy"))
async def show_tierlist(message: types.Message):
    cursor.execute("SELECT name, economy FROM countries ORDER BY economy DESC")
    economy_list = cursor.fetchall()

    if not economy_list:
        await message.answer("‚ö† –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    tier_list = "\n".join([f"üèÜ {i+1}. {name} - {economy}üí∞" for i, (name, economy) in enumerate(economy_list)])

    await message.answer(f"üìä **–¢–∏—Ä-–ª–∏—Å—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏**:\n{tier_list}")

@r.message(Command("list_population"))
async def list_population(message: Message):
    """ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∏—Ä-–ª–∏—Å—Ç–∞ —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é """
    tier_list = get_population_tier_list()
    await message.answer(tier_list)
    
# endregion 

# region 5 ‚Å°‚Å£‚Å¢‚Å¢‚Äã‚Äå‚Äå‚ÄçArmy‚Å°‚Äã

@r.message(F.text.lower() == '—Å—Ä–∞–∂–∞—Ç—å—Å—è')
async def battle(message: Message):
    
    is_user = await chek_is_user(user_id=message.from_user.id)
    if is_user is False:
        await message.answer("üö´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    if is_on_cooldown(user_1_id) or is_on_cooldown(user_2_id):
        left_1 = get_cooldown_time_left(user_1_id)
        left_2 = get_cooldown_time_left(user_2_id)

        msg = "‚è≥ –ö—É–ª–¥–∞—É–Ω –±–æ—è!\n"
        if left_1 > 0:
            msg += f"üîπ –í–∞–º –∂–¥–∞—Ç—å: {left_1} —Å–µ–∫.\n"
        if left_2 > 0:
            msg += f"üî∏ –°–æ–ø–µ—Ä–Ω–∏–∫—É –∂–¥–∞—Ç—å: {left_2} —Å–µ–∫."
        await message.answer(msg)
        return
    
    if not message.reply_to_message:
        await message.answer("‚öîÔ∏è **–°—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!**")
        return

    user_1_id, user_2_id = message.from_user.id, message.reply_to_message.from_user.id
    if not check_war_status(user_1_id, user_2_id):
        await message.answer("‚ùå **–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≤–æ–π–Ω–µ –∏–ª–∏ —É –≤–∞—Å –ø–µ—Ä–µ–º–∏—Ä–∏–µ!**")
        return

    army_1, army_2 = await get_army(user_1_id), await get_army(user_2_id)
    if not army_1 or not army_2:
        await message.answer("‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä–º–∏—é –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.**")
        return

    attacker_id, defender_id = user_1_id, user_2_id
    attacker_army, defender_army = army_1, army_2
    
    country_name_1 = await get_country_from_users(user_1_id)
    country_name_2 = await get_country_from_users(user_2_id)
    country1 = await get_country_params(country_name_1)
    country2 = await get_country_params(country_name_2)
    army_1_bonus_attack = country1[10]
    army_2_bonus_attack = country2[10]
    army_1_bonus_defense = country1[9]
    army_2_bonus_defense = country2[9]

    def calculate_strength(army, is_attacker, attack_bonus_country, defense_bonus_country, luck=True):
        base_strength = army['soldiers'] + army['cars'] * 5 + army['tanks'] * 10
        if army['soldiers'] < (army['cars'] + army['tanks']):
            return None

        tactic_attack_bonus, tactic_defense_penalty = 1.0, 1.0
        if is_attacker and army['tactic'] == 'attack':
            tactic_attack_bonus, tactic_defense_penalty = 1.3, 0.65
        elif not is_attacker and army['tactic'] == 'defend':
            tactic_attack_bonus, tactic_defense_penalty = 0.65, 1.25

        luck_factor = random.uniform(0.9, 1.1) if luck else 1.0

        total_attack_bonus = tactic_attack_bonus * (1 + attack_bonus_country / 100)
        total_defense_bonus = tactic_defense_penalty * (1 + defense_bonus_country / 100)

        attack_strength = base_strength * total_attack_bonus * luck_factor
        defense_strength = base_strength * total_defense_bonus * luck_factor

        return attack_strength, defense_strength

    # –†–∞—Å—á—ë—Ç —Å–∏–ª—ã –±–µ–∑ —É–¥–∞—á–∏ –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    attacker_base_attack, _ = calculate_strength(
        attacker_army, True, army_1_bonus_attack, army_1_bonus_defense, luck=False
    )
    _, defender_base_defense = calculate_strength(
        defender_army, False, army_2_bonus_attack, army_2_bonus_defense, luck=False
    )

    win_chance = 50.0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if attacker_base_attack and defender_base_defense:
        win_chance = attacker_base_attack / (attacker_base_attack + defender_base_defense) * 100

    # –†–∞—Å—á—ë—Ç —Å —Ä–∞–Ω–¥–æ–º–æ–º
    attacker_attack, attacker_defense = calculate_strength(
        attacker_army, True, army_1_bonus_attack, army_1_bonus_defense
    )
    defender_attack, defender_defense = calculate_strength(
        defender_army, False, army_2_bonus_attack, army_2_bonus_defense
    )

    if attacker_attack is None:
        await message.answer(f"‚ö† **{message.from_user.username} –ø—Ä–æ–∏–≥—Ä–∞–ª! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç.** ‚ùå")
        return
    if defender_attack is None:
        await message.answer(f"‚ö† **{message.reply_to_message.from_user.username} –ø—Ä–æ–∏–≥—Ä–∞–ª! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç.** ‚ùå")
        return

    winner_name = loser_name = ""
    if attacker_attack > defender_defense:
        winner, loser = attacker_id, defender_id
        winner_name = message.from_user.username or message.from_user.first_name
        loser_name = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name

        attacker_loss = 0.25
        defender_loss = 0.5
    else:
        winner, loser = defender_id, attacker_id
        winner_name = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
        loser_name = message.from_user.username or message.from_user.first_name

        attacker_loss = 0.4
        defender_loss = 0.2

    # –°–Ω–∏–∂–∞–µ–º –∞—Ä–º–∏–∏
    update_army(
        attacker_id,
        int(attacker_army['soldiers'] * (1 - attacker_loss)),
        int(attacker_army['cars'] * (1 - attacker_loss)),
        int(attacker_army['tanks'] * (1 - attacker_loss))
    )
    update_army(
        defender_id,
        int(defender_army['soldiers'] * (1 - defender_loss)),
        int(defender_army['cars'] * (1 - defender_loss)),
        int(defender_army['tanks'] * (1 - defender_loss))
    )

    await bot.send_message(winner, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {winner_name}! –í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É –Ω–∞–¥ {loser_name}!")
    await bot.send_message(loser, f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–∏—Ç–≤—É –ø—Ä–æ—Ç–∏–≤ {winner_name}. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –ª—É—á—à–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

    result_message = (
        f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner_name}!\n"
        f"üí• –°–∏–ª–∞ —É–¥–∞—Ä–∞: {attacker_attack:.0f} vs {defender_defense:.0f}\n"
        f"üìä **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –∞—Ç–∞–∫—É—é—â–µ–≥–æ:** {win_chance:.1f}%\n"
        f"‚ò†Ô∏è –ü–æ—Ç–µ—Ä–∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ: -{int(attacker_loss * 100)}%\n"
        f"‚ò†Ô∏è –ü–æ—Ç–µ—Ä–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞: -{int(defender_loss * 100)}%"
    )
    
    await message.answer(result_message)
    set_cooldown(user_1_id)
    set_cooldown(user_2_id)
    
@r.callback_query(F.data == "ad_ready")
async def ad_ready(call: CallbackQuery):
    global ready_army
    user_id = call.from_user.id
    current_ready_army = await get_ready_army_by_user(user_id)
    
    if current_ready_army == None:
        current_ready_army = 0
        
    if current_ready_army >= 100:
        await call.answer("üîù–í–∞—à–∞ –≥–æ—Ç–æ–≤–Ω–∞—Å—Ç—å —Ä–∞–≤–Ω—è–µ—Ç—Å—è 100.")
        await set_army_ready_by_user(user_id, 100)
        return
        
    if user_id in army_ready_state and army_ready_state[user_id] == "blocked":
        await call.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
        
    await call.answer(text="üîù–ü–æ–≤—ã—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–æ–π—Å–∫ –Ω–∞—á–∞—Ç–æ!", show_alert=True)
        
    army_ready_state[user_id] = "blocked"
    ready_army = True
    asyncio.create_task(while_transfer_ready_army(user_id, 1, call))
        
@r.callback_query(F.data == "tactics")
async def tactics(call: CallbackQuery):
    tactic_get = await get_army(call.from_user.id)
    
    if tactic_get:
        tactic = tactic_get['tactic']
        if tactic == "defend":
            await call.message.answer(f"‚ÜîÔ∏è–í–∞—à–∞ —Ç–∞–∫—Ç–∏–∫–∞:\nüîÑ—Ç–∞–∫—Ç–∏–∫–∞: {tactic}\n–ë–æ–Ω—É—Å—ã:\nüÜôüõ°Ô∏è-–ü–æ–≤—ã—à–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞ –Ω–∞ 40%\n„ÄΩÔ∏èüó°Ô∏è-–ü–æ–Ω–∏–∂–∞–µ—Ç—Å—è –∞—Ç–∞–∫–∞ –Ω–∞ 50%")
        if tactic == "attack":
            await call.message.answer(f"‚¨Ü–í–∞—à–∞ —Ç–∞–∫—Ç–∏–∫–∞:\nüîÑ—Ç–∞–∫—Ç–∏–∫–∞: {tactic}\n–ë–æ–Ω—É—Å—ã:\n-üÜôüó°Ô∏è–ü–æ–≤—ã—à–∞–µ—Ç—Å—è –∞—Ç–∞–∫–∞ –Ω–∞ 35%\n-„ÄΩÔ∏èüõ°Ô∏è–ü–æ–Ω–∏–∂–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞ –Ω–∞ 50%")
        await call.message.answer(f"üÜï–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–∫—Ç–∏–∫–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É", reply_markup=edit_tactic_kb)
    else:
        await call.message.answer("üö´–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –∞—Ä–º–∏–∏.")

@r.callback_query(F.data == "tactics_defend")
async def tactics_defend(call: CallbackQuery):
    user_id = call.from_user.id
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_used = cooldown_storage_defend.get(user_id)
    if last_used and (now - last_used < COOLDOWN_SECONDS):
        remaining = int(COOLDOWN_SECONDS - (now - last_used))
        await call.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    cooldown_storage_defend[user_id] = now

    defend = await get_tactics_by_user(user_id=user_id)
    
    if defend != "defend":
        defend = "defend"
        await edit_tactic(call.from_user.id, defend)
        await call.message.answer("‚úèÔ∏è –¢–∞–∫—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 'defend'")
    elif defend == "defend":
        await call.message.answer("‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ —Ç–∞–∫—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 'defend'")
    else:
        await call.message.answer(f"üö´Error: call.from_user.id:{call.from_user.id}, defend:{defend}, cooldown_storage_defend:{cooldown_storage_defend.get(user_id)}, COOLDOWN_SECONDS:{COOLDOWN_SECONDS}")

@r.callback_query(F.data == "tactics_attack")
async def tactics_attack(call: CallbackQuery):
    user_id = call.from_user.id
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_used = cooldown_storage_attack.get(user_id)
    if last_used and (now - last_used < COOLDOWN_SECONDS):
        remaining = int(COOLDOWN_SECONDS - (now - last_used))
        await call.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    cooldown_storage_attack[user_id] = now

    attack = await get_tactics_by_user(user_id=user_id)
    
    if attack != "attack":
        attack = "attack"
        await edit_tactic(call.from_user.id, attack)
        await call.message.answer("‚úèÔ∏è –¢–∞–∫—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 'attack'")
    elif attack == "attack":
        await call.message.answer("‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ —Ç–∞–∫—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 'attack'")
    else:
        await call.message.answer(f"üö´Error: call.from_user.id:{call.from_user.id}, attack:{attack}, cooldown_storage_attack:{cooldown_storage_attack.get(user_id)}, COOLDOWN_SECONDS:{COOLDOWN_SECONDS}")

@r.message(F.text.in_({'–ê—Ä–º–∏—è','–∞—Ä–º–∏—è','Army'}))
async def army(message: Message):
    user_id = message.from_user.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await message.answer("üö´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    is_army = await chek_is_army(user_id=user_id)
    country_name = await get_country_from_users(user_id=user_id)
    if is_army is False:
        cursor.execute("INSERT INTO army(user_id, soldiers, cars, tanks) VALUES(?, ?, ?, ?)", (user_id, 10, 2, 1))
        conn.commit()
        await message.answer("–ê—Ä–º–∏—è —Å–æ–∑–¥–∞–Ω–∞!ü™ñ")
    else:
        army_params = await get_army(user_id)
        soldiers = army_params['soldiers']
        cars = army_params['cars']
        tanks = army_params['tanks']
        ready = army_params['ready']
        army = await calculate_army_strength(army_params, country_name=country_name)
        need = army['needed_soldiers']
        strength = army['strength']
        attack_bonus = army['attack_bonus']
        defense_bonus = army['defense_bonus']
        if soldiers <= need:
            await message.answer(f"üö´–ù–µ —Ö–≤–∞—Ç–∫–∞ –°–æ–ª–¥–∞—Ç!{soldiers - need}", reply_markup=armmy_kb)
        else:
            await message.answer(f"--–ê—Ä–º–∏—è--\n–°–æ–ª–¥–∞—Ç—ã - {soldiers - need}ü™ñ, —Å—Ç–æ–∏–º–æ—Å—Ç—å - 100üíµ\n–ú–∞—à–∏–Ω—ã - {cars}üõª, —Å—Ç–æ–∏–º–æ—Å—Ç—å - 1000üíµ\n–¢–∞–Ω–∫–∏ - {tanks}üí•, —Å—Ç–æ–∏–º–æ—Å—Ç—å - 3000üíµ\n–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å - {ready}üî∞\n‚öîÔ∏è–ë–æ–Ω—É—Å –≤ –∞—Ç–∞–∫–µ - {attack_bonus}\nüõ°Ô∏è–ë–æ–Ω—É—Å –≤ –∑–∞—â–∏—Ç–µ - {defense_bonus}\n–ë–∞–ª–ª—ã - {strength}\n–î–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ - /army_peace", reply_markup=armmy_kb)

@r.message(Command("army_peace"))
async def army_peace_help(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–∏:\n–û–±—å—è–≤–∏—Ç—å –≤–æ–π–Ω—É - –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n–û–±—å—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–∏—Ä–∏–µ - –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –±—ã—Ç—å –≤ –≤–æ–π–Ω–µ —Å –Ω–∏–º\n—Å—Ä–∞–∂–∞—Ç—å—Å—è - –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–π–Ω—ã —Ç–∞–∫–∂–µ –±—ã—Ç—å –≤ –Ω—É–∂–Ω–æ–π —Ç–∞–∫—Ç–∏–∫–µ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ª–∏–±–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–∞–∫—Ç–∏–∫—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ç–æ–± –ø–æ–±–µ–¥–∏—Ç—å –≤ —Å—Ä–∞–∂–µ–Ω–∏–∏", reply_markup=keyboard_army_peace)

@r.callback_query(F.data == 'sol')
async def add_soldiers(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 100, 10)
    if acc == True:
        await add_army_slodiers(callback.from_user.id, 100, 10)
        await bot.send_message(callback.from_user.id, "10 –°–æ–ª–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

@r.callback_query(F.data == 'car')
async def add_—Åars(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 1000, 5)
    if acc == True:
        await add_army_cars(callback.from_user.id, 1000, 5)
        await callback.message.answer("5 –ú–∞—à–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

@r.callback_query(F.data == 'tan')
async def add_tanks(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 3000, 1)
    if acc == True:
        await add_army_tanks(callback.from_user.id, 3000, 1)
        await callback.message.answer("1 –¢–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –≤–æ–π–Ω—ã
@r.message(F.text == "–æ–±—å—è–≤–∏—Ç—å –≤–æ–π–Ω—É")
async def declare_war(message: types.Message, state: FSMContext):
    if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        attacker_id = message.from_user.id  # ID —Ç–æ–≥–æ, –∫—Ç–æ –æ–±—ä—è–≤–ª—è–µ—Ç –≤–æ–π–Ω—É
        defender_id = message.reply_to_message.from_user.id  # ID —Ç–æ–≥–æ, –∫–æ–º—É –æ–±—ä—è–≤–ª—è—é—Ç –≤–æ–π–Ω—É
        
        is_user1 = await chek_is_user(attacker_id)
        is_user2 = await chek_is_user(defender_id)
        is_war = await chek_is_war(attacker_id, defender_id)
        is_army1 = await chek_is_army(attacker_id)
        is_army2 = await chek_is_army(defender_id)
        if is_user1 == False:
            await message.reply("üö´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        if is_user2 == False:
            await message.reply("üö´–í—Ä–∞–≥ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        if is_war == True:
            await message.reply("üö´–í—ã —É–∂–µ –æ–±—ä—è–≤–∏–ª–∏ –≤–æ–π–Ω—É —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º!")
            return

        if is_army1 == False:
            await message.reply("üö´–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞—Ä–º–∏—é!")
            return
        
        if is_army2 == False:
            await message.reply("üö´–í—Ä–∞–≥ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞—Ä–º–∏—é!")
            return

        cursor.execute(
            "INSERT INTO wars (country1, country2, result) VALUES (?, ?, ?) ", (attacker_id, defender_id, "active"))
        conn.commit()

        await message.reply(f"‚öî –í–æ–π–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ç–∏–≤ <b>{message.reply_to_message.from_user.full_name}</b>!", parse_mode="HTML")
        await bot.send_message(chat_id=defender_id, text=f"‚öî –í–∞–º –æ–±—å—è–≤–ª–µ–Ω–∞ –≤–æ–π–Ω–∞ –ø—Ä–æ—Ç–∏–≤ <b>{message.reply_to_message.from_user.full_name}</b>!", parse_mode="HTML")
    else:
        await message.reply("‚ö† –ß—Ç–æ–±—ã –æ–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞–≥–∞!")

@r.message(F.text == "–æ–±—å—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–∏—Ä–∏–µ")
async def propose_peace(message: types.Message):
    if message.reply_to_message:
        sender_id = message.from_user.id  # –ö—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∏—Ä
        receiver_id = message.reply_to_message.from_user.id  # –ö–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –º–∏—Ä

        is_war = await chek_is_war(sender_id, receiver_id)
        
        if is_war == False:
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–π–Ω—ã —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º!")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∏—Ä
        cursor.execute(
            "INSERT INTO peace_requests (sender_id, receiver_id, status) VALUES (?, ?, 'pending') "
            "ON CONFLICT(sender_id, receiver_id) DO UPDATE SET status = 'pending'",
            (sender_id, receiver_id)
        )

        buttons = [
            [InlineKeyboardButton(text="ü§ù –ü—Ä–∏–Ω—è—Ç—å –º–∏—Ä", callback_data=f"accept_peace:{sender_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –º–∏—Ä", callback_data=f"decline_peace:{sender_id}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.bot.send_message(
            chat_id=receiver_id,
            text=f"‚öñ {message.from_user.full_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –º–∏—Ä. –ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.",
            reply_markup=keyboard
        )
    else:
        await message.reply("‚ö† –ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–∏—Ä, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞–≥–∞!")
        
@r.callback_query(F.data.startswith("accept_peace:"))
async def accept_peace(callback_query: types.CallbackQuery):
    receiver_id = callback_query.from_user.id  # –ö—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∏—Ä
    sender_id = int(callback_query.data.split(":")[1])  # –ö—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –º–∏—Ä

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    cursor.execute(
        "SELECT status FROM peace_requests WHERE sender_id = ? AND receiver_id = ?",
        (sender_id, receiver_id)
    )
    peace_request = cursor.fetchone()

    if not peace_request or peace_request[0] != "pending":
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–∏—Ä.")
        conn.close()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ wars
    cursor.execute(
        "UPDATE wars SET result = 'peace' WHERE (country1 = ? AND country2 = ?) OR (country2 = ? AND country1 = ?)",
        (sender_id, receiver_id, receiver_id, sender_id)
    )

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∏—Ä
    cursor.execute(
        "DELETE FROM peace_requests WHERE sender_id = ? AND receiver_id = ?",
        (sender_id, receiver_id)
    )

    await callback_query.message.edit_text("‚úÖ –ú–∏—Ä –∑–∞–∫–ª—é—á—ë–Ω! –í–æ–π–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
    await callback_query.bot.send_message(sender_id, "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –º–∏—Ä–µ –ø—Ä–∏–Ω—è—Ç–æ!")

@r.callback_query(F.data.startswith("decline_peace:"))
async def decline_peace(callback_query: types.CallbackQuery):
    receiver_id = callback_query.from_user.id
    sender_id = int(callback_query.data.split(":")[1])

    cursor.execute(
        "DELETE FROM peace_requests WHERE sender_id = ? AND receiver_id = ?",
        (sender_id, receiver_id)
    )

    await callback_query.message.edit_text("‚ùå –ú–∏—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í–æ–π–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    await callback_query.bot.send_message(sender_id, "‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –º–∏—Ä–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

        
# endregion

# region 6 ‚Å°‚Å¢‚Å£‚Å¢‚Äã‚Äå‚Äå‚Äçadmin‚Å°‚Äã

@r.message(Command("get_admin"))
async def get_admin(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if not is_admin:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    cursor.execute("SELECT user_id FROM admins")
    admins = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤

    if not admins:
        await message.reply("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤.")
        return

    admin_list = []
    for admin in admins:
        admin_id = admin[0]
        cursor.execute("SELECT name FROM users WHERE user_id = ?", (admin_id,))
        admin_name = cursor.fetchone()
        
        if admin_name:
            admin_list.append(f"üÜî {admin_id} | üë§ {admin_name[0]}")
        else:
            admin_list.append(f"üÜî {admin_id} | ‚ùå –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    result_text = "\n".join(admin_list)
    await message.reply(f"üëë **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n{result_text}")

@r.message(Command("register_admin"))
async def register_admin(message: Message, state: FSMContext):
    await message.reply("üîë–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: \n–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(RegisterAdmin.password)
    
@r.message(RegisterAdmin.password)
async def register_admin_password(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.reply("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.finish()
        return
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == True:
        await message.reply("üö®–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        await state.clear()
        return
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.reply("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    if message.text == ADMIN_PASSWORD:
        await message.reply("‚úÖ–ü–∞—Ä–æ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞")
        logging.info(F"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω —Å ID: {message.from_user.id}")
        await add_admin(message.from_user.id)
        await state.clear()
        return
    else:
        await message.reply("üö®–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        
@r.message(Command("admin"))
async def admin_command(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return
    await message.answer("/ban 'ID' - –±–∞–Ω –∏–≥—Ä–æ–∫–∞ –ø–æ ID\n/givement <id –ø–æ–ª—É—á–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>. - –í—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –ø–æ ID\n/create_country 'name' 'economy' 'population' 'happiness' 'temp_rost' - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–µ –ø–æ—Ä–∞–º–µ—Ç—Ä–æ–≤\n/delete_country 'name' - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n/get_users - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID –∏ –≤–æ–æ–±—â–µ–º –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n/get_country - –ø–æ–ª—É—á–µ–Ω–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω —Å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏—Ç\n/get_admin - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤\n/update_country - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n", reply_markup=keyboard_admin)
    
@r.message(Command("ban"))
async def ban_user_message(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
        return
    args = message.text.split()
    if len(args)!= 2:
        if message.reply_to_message:
            ban_user_id = message.reply_to_message.from_user.id
            await ban_user(ban_user_id, message.from_user.id)
            await message.answer(F"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {ban_user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω", reply_markup=keyboard_admin)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {ban_user_id} –∑–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {message.from_user.id}")
            return
        else:
            await message.reply("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
            return
    user_id = int(args[1])
    if user_id == admin:
        logging.info(F"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!")
        return
    await ban_user(user_id, message.from_user.id)
    await message.reply(F"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω", reply_markup=keyboard_admin)
    
@r.message(Command('givement'))
async def givement_pol(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return
    try:
        args = message.text.split()
        if len(args) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /givement <id –ø–æ–ª—É—á–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>. –ü—Ä–∏–º–µ—Ä: /givement <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> 100")

        receiver_id = int(args[1])
        amount = float(args[2])

        cursor.execute("UPDATE users SET money = money + ? WHERE user_id = ?", (amount, receiver_id))

        try:
            await bot.send_message(chat_id=receiver_id, text=f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}')
        except TelegramForbiddenError:
            print(f"Cannot send message to user {receiver_id}: This user is a bot")
        
        logging.info(f"–ü–µ—Ä–µ–≤–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º —Å ID: {message.from_user.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {receiver_id} –Ω–∞ —Å—É–º–º—É {amount} –¥–µ–Ω–µ–≥")

        conn.commit()
        await message.reply("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard_admin)

    except ValueError as ve:
        await message.reply(f"–û—à–∏–±–∫–∞: {ve}", reply_markup=keyboard_admin)
    except Exception as e:
        conn.rollback()
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            
@r.message(Command("mailing"))
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id == admin or admin2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\nüö®–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞", reply_markup=keyboard_admin)
        await state.set_state(BroadcastForm.waiting_for_message)
    else:
        await message.answer("üö®–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
@r.message(BroadcastForm.waiting_for_message, F.content_type == ContentType.TEXT)
async def get_broadcast_message(message: Message, state: FSMContext):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        await state.clear()
        return
    broadcast_text = message.text
    
    if broadcast_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard_admin)
        await state.clear()
        return

    await broadcast_message(broadcast_text)
    
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=keyboard_admin)
    await state.clear()
    
@r.message(Command("get_users"))
async def get_users(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    useri = await get_all_users()
    if useri:
        response = "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id, name, money, country, role in useri:
            response += f"user_id - {user_id}, name - {name}, country - {money}, role - {country}, money- {role}\n"
    await message.reply(f"{response}")
    
@r.message(Command("get_country"))
async def get_country(message: Message):
    user_id = message.from_user.id
    countries = await get_all_country_params()
    is_admin = await chek_is_admin(user_id)
    if is_admin == False:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω")
        return
    if countries:
        response = "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω:\n"
        for capital, name, economy, population, happiness, temp_rost in countries:
            response += f"capital - {capital}, name - {name}, economy - {economy}, population - {population}, happiness - {happiness}, temp_rost - {temp_rost}\n"
    await message.reply(f"{response}")

@r.message(Command("delete_country"))
async def delete_country(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return
    try:
        args = message.text.split()
        if len(args)!= 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_country <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã>")

        name = args[1]

        cursor.execute("DELETE FROM countries WHERE name = ?", (name,))

        conn.commit()
        await message.reply(f"–°—Ç—Ä–∞–Ω–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=keyboard_admin)
    except ValueError as ve:
        await message.reply(f"–û—à–∏–±–∫–∞: {ve}", reply_markup=keyboard_admin)

@r.message(Command("create_country"))
async def create_country(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return

    try:
        args = message.text.split()
        if len(args)!= 6:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_country <—Å—Ç–æ–ª–∏—Ü–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã> <—ç–∫–æ–Ω–æ–º–∏–∫–∞> <–Ω–∞—Å–µ–ª–µ–Ω–∏–µ> <—Å—á–∞—Å—Ç—å–µ> <—Ç–µ–º–ø —Ä–æ—Å—Ç–∞>")

        capital = args[1]
        name = args[2]
        economy = args[3]
        population = args[4]
        happiness = args[5]
        temp_rost = args[6]

        cursor.execute("INSERT INTO countries (capital, name, economy, population, happiness, temp_rost) VALUES (?, ?,?,?,?,?)", (capital, name, economy, population, happiness, temp_rost))
        await message.reply(f"–°—Ç—Ä–∞–Ω–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=keyboard_admin)

        conn.commit()
    except ValueError as ve:
        await message.reply(f"–û—à–∏–±–∫–∞: {ve}", reply_markup=keyboard_admin)
        
@r.message(Command("update_country"))
async def update_country(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return
    try:
        args = message.text.split()
        if len(args)!= 7:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_country <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã> <—Å—Ç–æ–ª–∏—Ü–∞> <—ç–∫–æ–Ω–æ–º–∏–∫–∞> <–Ω–∞—Å–µ–ª–µ–Ω–∏–µ> <—Å—á–∞—Å—Ç—å–µ> <—Ç–µ–º–ø —Ä–æ—Å—Ç–∞>")
        chek_is_country = await get_country_params(args[1])
        if chek_is_country is None:
            await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        name = args[1]
        capital = args[2]
        economy = args[3]
        population = args[4]
        happiness = args[5]
        temp_rost = args[6]

        cursor.execute("UPDATE countries SET capital =?, economy =?, population =?, happiness =?, temp_rost =? WHERE name =?", (capital, economy, population, happiness, temp_rost, name))
        conn.commit()
        await message.reply(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞–Ω–µ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=keyboard_admin)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        
@r.message(Command('ban_admin'))
async def ban_admin(message: Message, state:FSMContext):
    if message.from_user.id == admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èü™™:\n–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
        await state.set_state(Ban.id)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–∞!‚ùå")

    @r.message(Ban.id)
    async def ban_admin_True(message: Message, state: FSMContext):
        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
            await state.clear()
            return
        
        cursor.execute(f"SELECT user_id FROM admins WHERE user_id = {message.text}")
        a = cursor.fetchone()
        adma = a[0]
            
        if adma != None:
            cursor.execute(f"DELETE FROM admins WHERE user_id = {message.text}")
            await bot.send_message(message.text, f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.first_name}")
            await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!‚úÖ")
            await state.clear()
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—ÇüôÖ‚Äç‚ôÇÔ∏è")
    
# endregion