# region imports

import sqlite3, random, time, asyncio

from aiogram import F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery, BotCommand
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import ChatMemberUpdatedFilter

from aiogram import types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ContentType, ChatMemberUpdated
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatMemberStatus

from app.keyboards import *
from app.DB import *
from bot import *
from config import *

# endregion

r = Router()
fm_t = False
chat_id = None
admin = 5626265763 
kol_kop = None

# region InCountryMethods

class Investigate(StatesGroup):
    num = State()

@r.callback_query(F.data == "invest")
async def investigate(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:\nüö´–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Investigate.num)
    
@r.message(Investigate.num)
async def process_investigate(message: Message, state: FSMContext):
    global numOfInvest, Invest
    if message.text == "–û—Ç–º–µ–Ω–∞":
        Invest = False
        await state.clear()
        return
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    is_user = await chek_is_user(message.from_user.id)
    money = await get_money(message.from_user.id)
    country = await get_country(message.from_user.id)
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    try:
        if money < int(message.text):
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        try:
            await transfer_money(message.from_user.id, int(message.text), False)
            asyncio.create_task(invest_task(country, int(message.text), message.from_user.id))
        except BaseException as e:
            await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
            Invest = False
            return
    except BaseException as e:
        await message.reply("ÔøΩ –û—à–∏–±–∫–∞: " + str(e))
        Invest = False
        return
        await state.clear()
        conn.commit()
        conn.close()

async def invest_task(country, money, chat_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    Invest = True
    numOfInvest = 0
    while Invest:
        numOfInvest += 1
        if numOfInvest == 6:
            Invest = False
            break
        try:
            cursor.execute("UPDATE countries SET economy = economy + ? WHERE name = ?", (money // 3, country))
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ {money // 3} –µ–¥–∏–Ω–∏—Ü —ç–∫–æ–Ω–æ–º–∏–∫–∏ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã.")
        except BaseException as e:
            await bot.send_message(chat_id=chat_id, text="üö® –û—à–∏–±–∫–∞: " + str(e))
            Invest = False
            break
        await asyncio.sleep(20)
    conn.commit()
    conn.close()

# endregion
    
# region earn money

@r.message(F.text.in_({"–∫–æ–ø–∞—Ç—å", "–ö–æ–ø–∞—Ç—å", "rjgfnm", "Rjgfnm"}))
async def kop(message: Message):
    global kol_kop
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if kol_kop is None:
        kol_kop = 0
    if kol_kop < 10:
        kol_kop += 1
    elif kol_kop >= 10:
        await message.reply("‚õè –í—ã —É–∂–µ –∫–æ–ø–∞–ª–∏ 10 —Ä–∞–∑.")
        return
    cursor.execute("UPDATE users SET money = money + 100 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    conn.close()
    await message.reply("üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100 –º–æ–Ω–µ—Ç.", reply_markup=keyboard_start)
    
@r.callback_query(F.data == "start_production")
async def money_from_country(callback_query: types.CallbackQuery):
    global fm_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        fm_t = False
        return
    await callback_query.answer("üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞—Ç–æ.\n‚è≥–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥.")
    fm_t = True
    while fm_t:
        country = await get_country(user_id)
        params = await get_country_params(country)
        economy = params[0] // 5
        population = params[1] // 4
        happiness = params[2] // 12
        income = economy + population * happiness
        await transfer_money(income, user_id, True)
        await bot.send_message(chat_id=chat_id, text=f"üí∞ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ {income} –º–æ–Ω–µ—Ç –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}.")
        await asyncio.sleep(5)
        
@r.callback_query(F.data == "stop_production")
async def stop_production(callback_query: types.CallbackQuery):
    global fm_t
    await callback_query.answer("üõë –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    fm_t = False
# endregion
    
@r.message(Command("help"))
async def help(message: Message):
    await message.reply("üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                        "/start - üèÅ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                        "/register - üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                        "/invest - üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É\n"
                        "/countries - üåé –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω\n"
                        "–ö–æ–ø–∞—Ç—å - ‚õè –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥\n"
                        "/info - ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n"
                        "/country_info - üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ\n"
                        "/help - ‚ùì –ü–æ–º–æ—â—å", reply_markup=keyboard_start)
    
# region Need methods

async def add_admin(user_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO admins (user_id) VALUES (?)", (user_id,))
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="‚ùóÔ∏è–û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    conn.close()
    return True

async def transfer_money(money, user_id, is_positive):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    try:
        if is_positive:
            cursor.execute("UPDATE users SET money = money + ? WHERE user_id =?", (money, user_id))
        else:
            cursor.execute("UPDATE users SET money = money - ? WHERE user_id =?", (money, user_id))
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="üö® –û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    conn.close()
    return True
    
async def chek_is_user(user_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user:
        return True
    else:
        return False
    conn.close()
    
async def get_money(user_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT money FROM users WHERE user_id = ?", (user_id,))
    money = cursor.fetchone()
    conn.close()
    return money[0]
    
async def get_country(user_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT country FROM users WHERE user_id = ?", (user_id,))
    country = cursor.fetchone()
    conn.close()
    return country[0]

async def get_country_params(country):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT economy, population, happiness, temp_rost FROM countries WHERE name = ?", (country,))
    country_params = cursor.fetchone()
    conn.close()
    return country_params

async def chek_is_admin(user_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM admins WHERE user_id =?", (user_id,))
    admin = cursor.fetchone()
    if admin:
        return True
    else:
        return False
    conn.close()
    
async def ban_user(user_id, admin_id):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM admins WHERE user_id =?", (user_id,))
        loggin.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º —Å ID: {admin_id}")
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="üö®–û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    conn.close()
    return True

# endregion

# region admin

class RegisterAdmin(StatesGroup):
    password = State()

@r.message(Command("register_admin"))
async def register_admin(message: Message, state: FSMContext):
    await message.reply("üîë–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
    await state.set_state(RegisterAdmin.password)
    
@r.message(RegisterAdmin.password)
async def register_admin_password(message: Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        await message.reply("‚úÖ–ü–∞—Ä–æ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞")
        await state.clear
        logging.info(F"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω —Å ID: {message.from_user.id}")
        await add_admin(message.from_user.id)
    else:
        await message.reply("üö®–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.reset_state()
        
@r.message(Command("admin"))
async def admin_command(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return
    await message.answer("ban 'ID' - –±–∞–Ω –∏–≥—Ä–æ–∫–∞ –ø–æ ID\ngivement 'sum' 'ID' - –í—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –ø–æ ID\ncreate_country 'name' 'economy' 'population' 'happiness' 'temp_rost' - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–µ –ø–æ—Ä–∞–º–µ—Ç—Ä–æ–≤\ndelete_country 'name' - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\nget_users - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID –∏ –≤–æ–æ–±—â–µ–º –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\nget_country - –ø–æ–ª—É—á–µ–Ω–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω —Å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
@r.message(Command("ban"))
async def ban_user(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
        return
    args = message.text.split()
    if len(args)!= 2:
        await message.reply("üö®–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban 'ID'")
        return
    user_id = int(args[1])
    await ban_user(user_id, message.from_user.id)
    await message.reply(F"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")
    
# @r.message(Command("givement"))
    
# endregion