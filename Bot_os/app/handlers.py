# region imports

import sqlite3, random, time, asyncio, logging, math
from aiogram import F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery, BotCommand, WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import ChatMemberUpdatedFilter
from aiogram import types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ContentType, ChatMemberUpdated
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import FSInputFile
from app.keyboards import *
from app.DB import *
from bot import *
from config import *

# endregion

# region config
r = Router()
fm_t = False
Pop_t = False
chat_id = None
admin = 5626265763 
kol_kop = None
user_states = {}
user_states2 = {}
party_state = {}
party_t = False

# endregion

# region States

class Party(StatesGroup):
    amount = State()
    
class RegisterAdmin(StatesGroup):
    password = State()
    
class BroadcastForm(StatesGroup):
    waiting_for_message = State()
    
class Investigate(StatesGroup):
    num = State()

# endregion

# region Need methods

async def set_happy_max(country):
    cursor.execute("UPDATE countries SET happiness = 100 WHERE name = ?", country)
    conn.commit()
    return

async def start_party_activate(chat_id, user_id, country, money):
    global party_t
    numOfParty = 0
    numOfParty += 1
    params = await get_country_params(country)
    happiness_min = math.ceil(money / 2000)
    happiness_max = math.ceil(money / 500)
    party_t = True
    await transfer_happiness(30, country, False)
    
    if numOfParty >= 8:
        await bot.send_message(chat_id=chat_id, text="–ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
        party_t = False
        party_state[user_id] = "unblocked"
        return
    
    if params[3] >= 100:
            await bot.send_message(chat_id=chat_id, text="üéâ –°—á–∞—Å—Ç—å–µ –¥–æ—Å—Ç–∏–≥–ª–æ 100! –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            party_t = False
            party_state[user_id] = "unblocked"
            await set_happy_max(country)
            return

    while party_t:
        current_happiness = await get_country_params(country)
        
        if current_happiness[3] >= 100:
            await bot.send_message(chat_id=chat_id, text="üéâ –°—á–∞—Å—Ç—å–µ –¥–æ—Å—Ç–∏–≥–ª–æ 100! –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            party_t = False
            party_state[user_id] = "unblocked"
            await set_happy_max(country)
            break

        happiness = random.randint(happiness_min, happiness_max)

        await bot.send_message(chat_id=chat_id, text=f"üìà –°—á–∞—Å—Ç—å–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ {happiness}.")
        await transfer_happiness(happiness, country, True)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
        await asyncio.sleep(5)

async def invest_task(country, money, chat_id):
    Invest = True
    numOfInvest = 0
    economy_min = money // 10
    economy_max = money // 5
    while Invest:
        numOfInvest += 1
        economy = random.randint(economy_min, economy_max)
        if numOfInvest == 6:
            Invest = False
            break
        try:
            cursor.execute("UPDATE countries SET economy = economy + ? WHERE name = ?", (economy, country))
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ {economy} –µ–¥–∏–Ω–∏—Ü —ç–∫–æ–Ω–æ–º–∏–∫–∏ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã.")
        except BaseException as e:
            await bot.send_message(chat_id=chat_id, text="üö® –û—à–∏–±–∫–∞: " + str(e))
            Invest = False
            break
        await asyncio.sleep(20)

async def start_production_activate(chat_id, user_id):
    global pop_t

    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
    def calculate_income_params(params):
        economy_max = params[1] // 45
        population_max = params[2] // 30
        happiness_max = params[3] // 24
        income_max = economy_max + population_max * happiness_max

        econome_min = params[1] // 80
        population_min = params[2] // 50
        happiness_min = params[3] // 48
        income_min = econome_min + population_min * happiness_min

        return income_min, income_max

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while fm_t:
        country = await get_country_from_users(user_id)
        params = await get_country_params(country)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        if not params or len(params) < 4:
            logging.error(f"Invalid params for country {country}: {params}")
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            continue

        income_min, income_max = calculate_income_params(params)
        income = random.randint(income_min, income_max)
        
        await transfer_money(income, user_id, True)
        await bot.send_message(chat_id=chat_id, text=f"üí∞ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ {income} –º–æ–Ω–µ—Ç –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}.")
        await asyncio.sleep(5)

async def start_population_activate(chat_id, user_id):
    global pop_t
    while pop_t:
        country = await get_country_from_users(user_id)
        params = await get_country_params(country)
        population_max = params[2] // 50 + params[4] // 5
        population_min = params[2] // 100 + params[4] // 15
        population = random.randint(population_min, population_max)
        
        await transfer_population(population, country, True)
        await bot.send_message(chat_id=chat_id, text=f"üë©‚Äçüçº –ë—ã–ª–æ —Ä–æ–∂–¥–µ–Ω–æ {population} –ª—é–¥–µ–π –∏–∑ —Å—Ç—Ä–∞–Ω—ã {country}.")
        await asyncio.sleep(5)

async def add_admin(user_id):
    try:
        cursor.execute("INSERT INTO admins (user_id) VALUES (?)", (user_id,))
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="‚ùóÔ∏è–û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    return True

async def transfer_population(population, country, is_positive):
    try:
        if is_positive:
            cursor.execute("UPDATE countries SET population = population + ? WHERE name =?", (population, country))
        else:
            cursor.execute("UPDATE countries SET population = population - ? WHERE name =?", (population, country))
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="üö® –û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    return True

async def transfer_happiness(happiness, country, is_positive):
    try:
        if is_positive:
            cursor.execute("UPDATE countries SET happiness = happiness + ? WHERE name =?", (happiness, country))
        else:
            cursor.execute("UPDATE countries SET happiness = happiness - ? WHERE name =?", (happiness, country))
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="üö® –û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    return True

async def transfer_money(money, user_id, is_positive):
    try:
        if is_positive == True:
            cursor.execute("UPDATE users SET money = money + ? WHERE user_id =?", (money, user_id))
        else:
            cursor.execute("UPDATE users SET money = money - ? WHERE user_id =?", (money, user_id))
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="üö® –û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    return True
    
async def chek_is_user(user_id):
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user:
        return True
    else:
        return False
    
async def get_money(user_id):
    cursor.execute("SELECT money FROM users WHERE user_id = ?", (user_id,))
    money = cursor.fetchone()
    return money[0]
    
async def get_country_from_users(user_id):
    cursor.execute("SELECT country FROM users WHERE user_id = ?", (user_id,))
    country = cursor.fetchone()
    return country[0]

async def get_country_params(country):
    cursor.execute("SELECT capital, economy, population, happiness, temp_rost FROM countries WHERE name = ?", (country,))
    country_params = cursor.fetchone()
    return country_params

async def chek_is_admin(user_id):
    cursor.execute("SELECT user_id FROM admins WHERE user_id = ?", (user_id,))
    admin = cursor.fetchone()
    if admin is None:
       return  False
    elif admin is not None:
        return True
    else:
        return False
    
async def ban_user(user_id, admin_id):
    try:
        cursor.execute("DELETE FROM admins WHERE user_id =?", (user_id,))
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º —Å ID: {admin_id}")
    except BaseException as e:
        await bot.send_message(chat_id=admin, text="üö®–û—à–∏–±–∫–∞: " + str(e))
        return False
    conn.commit()
    return True
            
async def get_all_users():
    cursor.execute("SELECT user_id, name, country, role, money FROM users")
    users = cursor.fetchall()
    return users

async def get_all_users_id():
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    return [user[0] for user in users]

async def get_user_params(user_id):
    cursor.execute("SELECT name, country, role, money FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    return user

async def broadcast_message(message_text):
    users = await get_all_users()  # Assuming you have a function to get all user IDs
    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(chat_id=user_id, text=str(message_text))
        except TelegramForbiddenError:
            print(f"Cannot send message to user {user_id}: This user is a bot")
        except Exception as e:  
            print(f"Error sending message to user {user_id}: {str(e)}")
            
async def get_all_country_params():
    cursor.execute("SELECT capital, name, economy, population, happiness, temp_rost FROM countries")
    countries = cursor.fetchall()
    return countries

async def add_army_tanks(id, price, number):
    cursor.execute("UPDATE army SET tanks = tanks + ? WHERE user_id = ?", (number, id))
    await transfer_money(price, id, False)
    conn.commit()

def get_army(user_id):
    cursor.execute('SELECT soldiers, cars, tanks FROM army WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    return {'soldiers': result[0], 'cars': result[1], 'tanks': result[2]} if result else None

def calculate_army_strength(army):
    soldiers = army['soldiers']
    cars = army['cars']
    tanks = army['tanks']
    
    needed_soldiers_for_cars = cars * 3
    needed_soldiers_for_tanks = tanks * 4
    total_needed_soldiers = needed_soldiers_for_cars + needed_soldiers_for_tanks
    
    if soldiers < total_needed_soldiers:
        return None 
    
    remaining_soldiers = soldiers - total_needed_soldiers
    strength = remaining_soldiers + (cars * 5) + (tanks * 20)
    return strength

async def army_accept(id, price):
    cursor.execute(f"SELECT money FROM users WHERE user_id = {id}")
    c = cursor.fetchone()
    money = c[0]
    if money >= price:
        return True
    else: 
        return False
    
async def add_army_slodiers(id, price, number):
    country = await get_country_from_users(id)
    params = await get_country_params(country)
    happiness = params[3]
    population = params[3]
    counter_happiness = math.ceil(happiness / 1000)
    if population < 100:
        await bot.send_message(chat_id=id, text=f"–£ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –º–µ–Ω—å—à–µ 100\n–í–∞—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {population}")
        return
    if population < number:
        await bot.send_message(chat_id=id, text=f"–£ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –º–µ–Ω—å—à–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞ –≤–µ—Ä–±–æ–≤–∞—Ç—å: {number}\n–í–∞—à–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {population}")
        return
    if happiness < 20:
        await bot.send_message(chat_id=id, text=f"–£ –≤–∞—à–µ —Å—á–∞—Å—Ç—å–µ –º–µ–Ω—å—à–µ 20\n–í–∞—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ: {happiness}")
        return
    if counter_happiness > happiness:
        await bot.send_message(chat_id=id, text=f"–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Ä–±—É–µ—Ç–µ —Å–æ–ª–¥–∞—Ç–æ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!")
        return
    cursor.execute("UPDATE army SET soldiers = soldiers + ? WHERE user_id = ?", (number, id))
    await transfer_happiness(counter_happiness, country, False)
    await transfer_population(number, country, False)
    await transfer_money(price, id, False)
    conn.commit()
    
async def add_army_cars(id, price, number):
    cursor.execute("UPDATE army SET cars = cars + ? WHERE user_id = ?", (number, id))
    await transfer_money(price, id, False)
    conn.commit()
    
async def chek_is_war(attacker_id, defender_id):
    cursor.execute(f"SELECT * FROM wars WHERE (country1 = {attacker_id} AND country2 = {defender_id}) OR (country1 = {defender_id} AND country2 = {attacker_id})")
    result = cursor.fetchone()
    if result is not None:
        return True
    else:
        return False
    
async def chek_is_army(user_id):
    cursor.execute(f"SELECT * FROM army WHERE user_id = {user_id}")
    result = cursor.fetchone()
    if result is not None:
        return True
    else:
        return False
    
def get_population_tier_list():
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏—Ä-–ª–∏—Å—Ç–∞ —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é (–¢–û–ü-5) """
    cursor.execute("SELECT name, population FROM countries ORDER BY population DESC LIMIT 5")
    top_countries = cursor.fetchall()
    
    if not top_countries:
        return "üìä **–¢–∏—Ä-–ª–∏—Å—Ç –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –ø—É—Å—Ç**"

    tier_list = "üìä **–¢–∏—Ä-–ª–∏—Å—Ç –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é:**\n"
    for idx, (country, population) in enumerate(top_countries, 1):
        tier_list += f"{idx}. {country} ‚Äî {population} üë•\n"
    
    return tier_list

def get_army(user_id):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–º–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î """
    cursor.execute("SELECT soldiers, cars, tanks FROM army WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return {'soldiers': result[0], 'cars': result[1], 'tanks': result[2]} if result else None

def update_army(user_id, soldiers, cars, tanks):
    """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–º–∏–∏ –≤ –ë–î """
    cursor.execute("""
        UPDATE army SET soldiers = ?, cars = ?, tanks = ? WHERE user_id = ?
    """, (max(0, soldiers), max(0, cars), max(0, tanks), user_id))
    conn.commit()

def check_war_status(user_1_id, user_2_id):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫–∏ –≤ –≤–æ–π–Ω–µ –∏ –Ω–µ –≤ –ø–µ—Ä–µ–º–∏—Ä–∏–∏ """
    cursor.execute("""
        SELECT result FROM wars WHERE 
        (country1 = ? AND country2 = ?) OR (country1 = ? AND country2 = ?)
    """, (user_1_id, user_2_id, user_2_id, user_1_id))
    
    war = cursor.fetchone()
    return war and war[0] == "active"  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "active", –∑–Ω–∞—á–∏—Ç –∏–¥–µ—Ç –≤–æ–π–Ω–∞

def calculate_army_strength(army):
    """ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–ª—ã –∞—Ä–º–∏–∏ """
    soldiers, cars, tanks = army['soldiers'], army['cars'], army['tanks']
    needed_soldiers = (cars * 3) + (tanks * 4)

    if soldiers < needed_soldiers:
        return None  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–π

    return (soldiers - needed_soldiers) + (cars * 5) + (tanks * 20)

# endregion

# region InCountryMethods

@r.callback_query(F.data == "invest")
async def investigate(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:\nüö´–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Investigate.num)
    
@r.message(Investigate.num)
async def process_investigate(message: Message, state: FSMContext):
    global numOfInvest, Invest
    if message.text == "–û—Ç–º–µ–Ω–∞":
        Invest = False
        await state.clear()
        return
    is_user = await chek_is_user(message.from_user.id)
    money = await get_money(message.from_user.id)
    country = await get_country_from_users(message.from_user.id)
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    try:
        if money < int(message.text):
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        try:
            await transfer_money(int(message.text), message.from_user.id, False)
            asyncio.create_task(invest_task(country, int(message.text), message.from_user.id))
            await message.reply("üíº –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥.")
            await state.clear()
        except BaseException as e:
            await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
            Invest = False
            await state.clear()
            return
    except BaseException as e:
        await message.reply("ÔøΩ –û—à–∏–±–∫–∞: " + str(e))
        Invest = False
        await state.clear()
        conn.commit()
        return
    
@r.callback_query(F.data == "start_party_happy")
async def start_party(callback_query: CallbackQuery, state: FSMContext):
    global party_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        party_t = False
        return
    
    if user_id in user_states2 and user_states2[user_id] == "blocked":
        await callback_query.answer("–ü—Ä–∞–∑–¥–Ω–∏–∫ —É–∂–µ –Ω–∞—á–∞—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 7 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞")
        return
    
    party_state[user_id] = "blocked"
    
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –ø–æ—Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫: ")
    await state.set_state(Party.amount)
    
@r.message(Party.amount)
async def party_accept_procces(message: Message, state: FSMContext):
    global party_t
    user_id = message.from_user.id
    chat_id = message.chat.id
    is_user = await chek_is_user(user_id)
    
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        party_t = False
        return
    
    money = await get_money(message.from_user.id)
    country = await get_country_from_users(message.from_user.id)
    try:
        if money < int(message.text):
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.")
            return
        if int(message.text) <= 500:
            await message.reply("–í–∞—à–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≤–∑–±—É—à–µ–≤–∞–ª–æ—Å—å –∏–∑-–∑–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ -10 —Å—á–∞—Å—Ç—å—è")
            await transfer_happiness(10, country, False)
            return
            
        try:
            await transfer_money(int(message.text), message.from_user.id, False)
            asyncio.create_task(start_party_activate(chat_id, user_id, country, int(message.text)))
            await message.reply("–ü—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞—á–∞—Ç–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.")
            party_t = True
            await state.clear()
        except BaseException as e:
            await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
            party_t = False
            await state.clear()
            return
    except BaseException as e:
        await message.reply("üö® –û—à–∏–±–∫–∞: " + str(e))
        party_t = False
        await state.clear()
        conn.commit()
        return

# endregion
    
# region earn money and product

@r.message(F.text.in_({"–∫–æ–ø–∞—Ç—å", "–ö–æ–ø–∞—Ç—å", "rjgfnm", "Rjgfnm"}))
async def kop(message: Message):
    global kol_kop
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if kol_kop is None:
        kol_kop = 0
    if kol_kop < 10:
        kol_kop += 1
    elif kol_kop >= 10:
        await message.reply("‚õè –í—ã —É–∂–µ –∫–æ–ø–∞–ª–∏ 10 —Ä–∞–∑.")
        return
    cursor.execute("UPDATE users SET money = money + 100 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.reply("üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 100 –º–æ–Ω–µ—Ç.", reply_markup=keyboard_start)
    
@r.callback_query(F.data == "start_production")
async def money_from_country(callback_query: types.CallbackQuery):
    global fm_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        fm_t = False
        return
    
    if user_id in user_states and user_states[user_id] == "blocked":
        await callback_query.answer("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ.")
        return
    
    user_states[user_id] = "blocked"
    
    await callback_query.answer("üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞—Ç–æ.\n‚è≥–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥.")
    fm_t = True
    asyncio.create_task(start_production_activate(chat_id, user_id))
        
@r.callback_query(F.data == "stop_production")
async def stop_production(callback_query: types.CallbackQuery):
    global fm_t
    await callback_query.answer("üõë –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    fm_t = False
    user_id = callback_query.from_user.id
    
    if user_id not in user_states or user_states[user_id] != "blocked":
        await callback_query.answer("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ.")
        return
    user_states[user_id] = "unblocked"
    
@r.callback_query(F.data == "start_population")
async def start_population(callback_query: types.CallbackQuery):
    global pop_t
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    is_user = await chek_is_user(user_id)
    if is_user == False:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        fm_t = False
        return
    
    if user_id in user_states2 and user_states2[user_id] == "blocked":
        await callback_query.answer("–†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ.")
        return
    
    user_states2[user_id] = "blocked"
    
    await callback_query.answer("üéÅ –†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞—á–∞—Ç–∞.\n‚è≥–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–π –¥–æ—Ö–æ–¥.")
    pop_t = True
    asyncio.create_task(start_population_activate(chat_id, user_id))
    
@r.callback_query(F.data == "stop_population")
async def stop_population(callback_query: types.CallbackQuery):
    global pop_t
    await callback_query.answer("üõë –†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    pop_t = False
    user_id = callback_query.from_user.id
    
    if user_id not in user_states2 or user_states2[user_id] != "blocked":
        await callback_query.answer("–†–∞–∑–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    user_states2[user_id] = "unblocked"
    
# endregion
    
# region guest methods

@r.message(Command("help"))
async def help(message: Message):
    await message.reply("üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                        "/start - üèÅ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                        "/register - üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                        "/invest - üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É\n"
                        "/countries - üåé –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω\n"
                        "–ö–æ–ø–∞—Ç—å - ‚õè –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥\n"
                        "/info - ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n"
                        "/country_info - üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ\n"
                        "/help - ‚ùì –ü–æ–º–æ—â—å", reply_markup=keyboard_start)
    
@r.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f"ID —Ñ–æ—Ç–∞: {message.photo[-1].file_id}")
    
@r.message(Command("map"))
async def show_map(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url="https://www.flickr.com/photos/202286975@N06/54326715216/in/dateposted-public/"))]
        ]
    )
    
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É:", reply_markup=keyboard)
    
@r.message(F.text.startswith('–¥–∞—Ç—å'))
async def give_currency(message: Message):
    if not message.reply_to_message:
        await message.reply("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É.")
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å 100")
            return
        
        amount = int(parts[1])

        if amount <= 0:
            await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å 100")
        return

    from_user_id = message.from_user.id
    to_user_id = message.reply_to_message.from_user.id


    cursor.execute(F"SELECT money FROM users WHERE user_id = {message.from_user.id}")
    c = cursor.fetchone()
    money = c[0]
    if money < amount:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    
@r.message(Command("list_economy"))
async def show_tierlist(message: types.Message):
    cursor.execute("SELECT name, economy FROM countries ORDER BY economy DESC")
    economy_list = cursor.fetchall()

    if not economy_list:
        await message.answer("‚ö† –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    tier_list = "\n".join([f"üèÜ {i+1}. {name} - {economy}üí∞" for i, (name, economy) in enumerate(economy_list)])

    await message.answer(f"üìä **–¢–∏—Ä-–ª–∏—Å—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏**:\n{tier_list}")

@r.message(Command("list_population"))
async def list_population(message: Message):
    """ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∏—Ä-–ª–∏—Å—Ç–∞ —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é """
    tier_list = get_population_tier_list()
    await message.answer(tier_list)
    
# endregion 

# region Army

@r.message(F.text.lower() == '—Å—Ä–∞–∂–∞—Ç—å—Å—è')
async def battle(message: Message):
    """ –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–∂–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ """
    if not message.reply_to_message:
        await message.answer("‚öîÔ∏è **–°—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!**")
        return

    user_1_id, user_2_id = message.from_user.id, message.reply_to_message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –æ–Ω–∏ –≤ –≤–æ–π–Ω–µ –∏ –Ω–µ –≤ –ø–µ—Ä–µ–º–∏—Ä–∏–∏
    if not check_war_status(user_1_id, user_2_id):
        await message.answer("‚ùå **–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≤–æ–π–Ω–µ –∏–ª–∏ —É –≤–∞—Å –ø–µ—Ä–µ–º–∏—Ä–∏–µ!**")
        return

    army_1, army_2 = get_army(user_1_id), get_army(user_2_id)

    if not army_1 or not army_2:
        await message.answer("‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä–º–∏—é –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.**")
        return

    strength_1, strength_2 = calculate_army_strength(army_1), calculate_army_strength(army_2)

    # –ï—Å–ª–∏ —É –ø–µ—Ä–≤–æ–π –∞—Ä–º–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–æ–ª–¥–∞—Ç ‚Üí —Å—Ä–∞–∑—É –ø—Ä–æ–∏–≥—Ä—ã—à
    if strength_1 is None:
        await message.answer(f"‚ö† **{message.from_user.username} –ø—Ä–æ–∏–≥—Ä–∞–ª! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–π.** ‚ùå")
        update_army(user_1_id, army_1['soldiers'] // 2, army_1['cars'] // 2, army_1['tanks'] // 2)
        return
    
    # –ï—Å–ª–∏ —É –≤—Ç–æ—Ä–æ–π –∞—Ä–º–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–æ–ª–¥–∞—Ç ‚Üí —Å—Ä–∞–∑—É –ø—Ä–æ–∏–≥—Ä—ã—à
    if strength_2 is None:
        await message.answer(f"‚ö† **{message.reply_to_message.from_user.username} –ø—Ä–æ–∏–≥—Ä–∞–ª! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–π.** ‚ùå")
        update_army(user_2_id, army_2['soldiers'] // 2, army_2['cars'] // 2, army_2['tanks'] // 2)
        return

    # –ü–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∞—Ä–º–∏–∏
    if strength_1 > strength_2:
        result_message = f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {message.from_user.username}!\nüí• **–°–∏–ª–∞ –∞—Ä–º–∏–∏:** {strength_1} vs {strength_2}"
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∞—Ä–º–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ 20% –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        update_army(
            user_1_id,
            army_1['soldiers'] - int(army_2['soldiers'] * 0.2),
            army_1['cars'] - int(army_2['cars'] * 0.2),
            army_1['tanks'] - int(army_2['tanks'] * 0.2)
        )
        
        # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ç–µ—Ä—è–µ—Ç 90%
        update_army(
            user_2_id,
            int(army_2['soldiers'] * 0.1),
            int(army_2['cars'] * 0.1),
            int(army_2['tanks'] * 0.1)
        )

    # –ü–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –∞—Ä–º–∏–∏
    elif strength_1 < strength_2:
        result_message = f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {message.reply_to_message.from_user.username}!\nüí• **–°–∏–ª–∞ –∞—Ä–º–∏–∏:** {strength_2} vs {strength_1}"
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∞—Ä–º–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ 20% –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        update_army(
            user_2_id,
            army_2['soldiers'] - int(army_1['soldiers'] * 0.2),
            army_2['cars'] - int(army_1['cars'] * 0.2),
            army_2['tanks'] - int(army_1['tanks'] * 0.2)
        )
        
        # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ç–µ—Ä—è–µ—Ç 90%
        update_army(
            user_1_id,
            int(army_1['soldiers'] * 0.1),
            int(army_1['cars'] * 0.1),
            int(army_1['tanks'] * 0.1)
        )

    # –ù–∏—á—å—è ‚Üí –æ–±–µ –∞—Ä–º–∏–∏ —Ç–µ—Ä—è—é—Ç –æ—Ç 10% –¥–æ 15%
    else:
        percent_1 = random.randint(10, 15) / 100
        percent_2 = random.randint(10, 15) / 100
        result_message = f"‚öî **–ù–∏—á—å—è!** –û–±–µ –∞—Ä–º–∏–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–∏–ª—ã.\nüí™ –°–∏–ª–∞ –∞—Ä–º–∏–∏: {strength_1} vs {strength_2}"

        update_army(
            user_1_id,
            int(army_1['soldiers'] * (1 - percent_1)),
            int(army_1['cars'] * (1 - percent_1)),
            int(army_1['tanks'] * (1 - percent_1))
        )

        update_army(
            user_2_id,
            int(army_2['soldiers'] * (1 - percent_2)),
            int(army_2['cars'] * (1 - percent_2)),
            int(army_2['tanks'] * (1 - percent_2))
        )

    await message.answer(result_message)

@r.message(F.text.in_({'–ê—Ä–º–∏—è','–∞—Ä–º–∏—è','Army'}))
async def army(message: Message):
    cursor.execute(F"SELECT user_id FROM army WHERE user_id = {message.from_user.id}")
    u = cursor.fetchone()
    conn.commit
    if u == None:
        cursor.execute("INSERT INTO army(user_id, soldiers, cars, tanks) VALUES(?, ?, ?, ?)", (message.from_user.id, 10, 2, 1))
        conn.commit()
        await message.answer("–ê—Ä–º–∏—è —Å–æ–∑–¥–∞–Ω–∞!ü™ñ")
    else:
        cursor.execute(f"SELECT soldiers FROM army WHERE user_id = {message.from_user.id}")
        s = cursor.fetchone()
        soldiers = s[0]
        cursor.execute(f"SELECT cars FROM army WHERE user_id = {message.from_user.id}")
        c = cursor.fetchone()
        cars = c[0]
        cursor.execute(f"SELECT tanks FROM army WHERE user_id = {message.from_user.id}")
        t = cursor.fetchone()
        tanks = t[0]
        conn.commit()
        balls = soldiers + (cars * 5) + (tanks * 20)
        need = (cars * 3) + (tanks * 4)
        if soldiers <= need:
            await message.answer(f"–ù–µ —Ö–≤–∞—Ç–∫–∞ –°–æ–ª–¥–∞—Ç!{soldiers - need}", reply_markup=armmy_kb)
        else:
            await message.answer(f"--–ê—Ä–º–∏—è--\n–°–æ–ª–¥–∞—Ç—ã - {soldiers - need}ü™ñ\n–ú–∞—à–∏–Ω—ã - {cars}üõª\n–¢–∞–Ω–∫–∏ - {tanks}üí•\n–ë–∞–ª–ª—ã - {balls}\n–î–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ - /army_peace", reply_markup=armmy_kb)

@r.message(Command("army_peace"))
async def army_peace_help(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–∏:\n–û–±—å—è–≤–∏—Ç—å –≤–æ–π–Ω—É - –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n–û–±—å—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–∏—Ä–∏–µ - –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –±—ã—Ç—å –≤ –≤–æ–π–Ω–µ —Å –Ω–∏–º\n—Å—Ä–∞–∂–∞—Ç—å—Å—è - –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–π–Ω—ã —Ç–∞–∫–∂–µ –±—ã—Ç—å –≤ –Ω—É–∂–Ω–æ–π —Ç–∞–∫—Ç–∏–∫–µ –∏ –∏–º–µ—Ç—å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ª–∏–±–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–∞–∫—Ç–∏–∫—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ç–æ–± –ø–æ–±–µ–¥–∏—Ç—å –≤ —Å—Ä–∞–∂–µ–Ω–∏–∏", reply_markup=keyboard_army_peace)

@r.callback_query(F.data == 'sol')
async def add_soldiers(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 100)
    if acc == True:
        await add_army_slodiers(callback.from_user.id, 100, 10)
        await callback.message.answer("10 –°–æ–ª–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

@r.callback_query(F.data == 'car')
async def add_—Åars(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 1000)
    if acc == True:
        await add_army_cars(callback.from_user.id, 1000, 5)
        await callback.message.answer("5 –ú–∞—à–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

@r.callback_query(F.data == 'tan')
async def add_tanks(callback: CallbackQuery):
    acc = await army_accept(callback.from_user.id, 3000)
    if acc == True:
        await add_army_tanks(callback.from_user.id, 3000, 1)
        await callback.message.answer("1 –¢–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –≤–∞—à—É –∞—Ä–º–∏—é!ü™ñ")
    else:
        await callback.message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥üìâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –≤–æ–π–Ω—ã
@r.message(F.text == "–æ–±—å—è–≤–∏—Ç—å –≤–æ–π–Ω—É")
async def declare_war(message: types.Message, state: FSMContext):
    if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        attacker_id = message.from_user.id  # ID —Ç–æ–≥–æ, –∫—Ç–æ –æ–±—ä—è–≤–ª—è–µ—Ç –≤–æ–π–Ω—É
        defender_id = message.reply_to_message.from_user.id  # ID —Ç–æ–≥–æ, –∫–æ–º—É –æ–±—ä—è–≤–ª—è—é—Ç –≤–æ–π–Ω—É
        
        is_user1 = await chek_is_user(attacker_id)
        is_user2 = await chek_is_user(defender_id)
        is_war = await chek_is_war(attacker_id, defender_id)
        is_army1 = await chek_is_army(attacker_id)
        is_army2 = await chek_is_army(defender_id)
        if is_user1 == False:
            await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        if is_user2 == False:
            await message.reply("–í—Ä–∞–≥ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        if is_war == True:
            await message.reply("–í—ã —É–∂–µ –æ–±—ä—è–≤–∏–ª–∏ –≤–æ–π–Ω—É —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º!")
            return

        if is_army1 == False:
            await message.reply("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞—Ä–º–∏—é!")
            return
        
        if is_army2 == False:
            await message.reply("–í—Ä–∞–≥ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞—Ä–º–∏—é!")
            return

        cursor.execute(
            "INSERT INTO wars (country1, country2, result) VALUES (?, ?, ?) ", (attacker_id, defender_id, "active"))
        conn.commit()

        await message.reply(f"‚öî –í–æ–π–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ç–∏–≤ <b>{message.reply_to_message.from_user.full_name}</b>!", parse_mode="HTML")
        await bot.send_message(chat_id=defender_id, text=f"‚öî –í–∞–º –æ–±—å—è–≤–ª–µ–Ω–∞ –≤–æ–π–Ω–∞ –ø—Ä–æ—Ç–∏–≤ <b>{message.reply_to_message.from_user.full_name}</b>!", parse_mode="HTML")
    else:
        await message.reply("‚ö† –ß—Ç–æ–±—ã –æ–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞–≥–∞!")

@r.message(F.text == "–æ–±—å—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–∏—Ä–∏–µ")
async def propose_peace(message: types.Message):
    if message.reply_to_message:
        sender_id = message.from_user.id  # –ö—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∏—Ä
        receiver_id = message.reply_to_message.from_user.id  # –ö–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –º–∏—Ä

        is_war = await chek_is_war(sender_id, receiver_id)
        
        if is_war == False:
            await message.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–π–Ω—ã —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º!")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∏—Ä
        cursor.execute(
            "INSERT INTO peace_requests (sender_id, receiver_id, status) VALUES (?, ?, 'pending') "
            "ON CONFLICT(sender_id, receiver_id) DO UPDATE SET status = 'pending'",
            (sender_id, receiver_id)
        )

        buttons = [
            [InlineKeyboardButton(text="ü§ù –ü—Ä–∏–Ω—è—Ç—å –º–∏—Ä", callback_data=f"accept_peace:{sender_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –º–∏—Ä", callback_data=f"decline_peace:{sender_id}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.bot.send_message(
            chat_id=receiver_id,
            text=f"‚öñ {message.from_user.full_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –º–∏—Ä. –ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.",
            reply_markup=keyboard
        )
    else:
        await message.reply("‚ö† –ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–∏—Ä, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞–≥–∞!")
        
@r.callback_query(F.data.startswith("accept_peace:"))
async def accept_peace(callback_query: types.CallbackQuery):
    receiver_id = callback_query.from_user.id  # –ö—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∏—Ä
    sender_id = int(callback_query.data.split(":")[1])  # –ö—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –º–∏—Ä

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    cursor.execute(
        "SELECT status FROM peace_requests WHERE sender_id = ? AND receiver_id = ?",
        (sender_id, receiver_id)
    )
    peace_request = cursor.fetchone()

    if not peace_request or peace_request[0] != "pending":
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–∏—Ä.")
        conn.close()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ wars
    cursor.execute(
        "UPDATE wars SET result = 'peace' WHERE (country1 = ? AND country2 = ?) OR (country2 = ? AND country1 = ?)",
        (sender_id, receiver_id, receiver_id, sender_id)
    )

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∏—Ä
    cursor.execute(
        "DELETE FROM peace_requests WHERE sender_id = ? AND receiver_id = ?",
        (sender_id, receiver_id)
    )

    await callback_query.message.edit_text("‚úÖ –ú–∏—Ä –∑–∞–∫–ª—é—á—ë–Ω! –í–æ–π–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
    await callback_query.bot.send_message(sender_id, "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –º–∏—Ä–µ –ø—Ä–∏–Ω—è—Ç–æ!")

@r.callback_query(F.data.startswith("decline_peace:"))
async def decline_peace(callback_query: types.CallbackQuery):
    receiver_id = callback_query.from_user.id
    sender_id = int(callback_query.data.split(":")[1])

    cursor.execute(
        "DELETE FROM peace_requests WHERE sender_id = ? AND receiver_id = ?",
        (sender_id, receiver_id)
    )

    await callback_query.message.edit_text("‚ùå –ú–∏—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í–æ–π–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    await callback_query.bot.send_message(sender_id, "‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –º–∏—Ä–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

        
# endregion

# region admin

@r.message(Command("register_admin"))
async def register_admin(message: Message, state: FSMContext):
    await message.reply("üîë–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: \n–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(RegisterAdmin.password)
    
@r.message(RegisterAdmin.password)
async def register_admin_password(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞" or message.text == "–æ—Ç–º–µ–Ω–∞":
        await message.reply("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.finish()
        return
    is_user = await chek_is_user(message.from_user.id)
    if is_user == False:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == True:
        await message.reply("üö®–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        await state.clear()
        return
    if message.text == "–û—Ç–º–µ–Ω–∞" or message.text == "–æ—Ç–º–µ–Ω–∞":
        await message.reply("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    if message.text == ADMIN_PASSWORD:
        await message.reply("‚úÖ–ü–∞—Ä–æ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞")
        logging.info(F"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω —Å ID: {message.from_user.id}")
        await add_admin(message.from_user.id)
        await state.clear()
        return
    else:
        await message.reply("üö®–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        
@r.message(Command("admin"))
async def admin_command(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞")
        return
    await message.answer("ban 'ID' - –±–∞–Ω –∏–≥—Ä–æ–∫–∞ –ø–æ ID\ngivement 'sum' 'ID' - –í—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –ø–æ ID\ncreate_country 'name' 'economy' 'population' 'happiness' 'temp_rost' - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–µ –ø–æ—Ä–∞–º–µ—Ç—Ä–æ–≤\ndelete_country 'name' - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\nget_users - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID –∏ –≤–æ–æ–±—â–µ–º –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\nget_country - –ø–æ–ª—É—á–µ–Ω–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω —Å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", reply_markup=keyboard_admin)
    
@r.message(Command("ban"))
async def ban_user_message(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
        return
    args = message.text.split()
    if len(args)!= 2:
        await message.reply("üö®–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban 'ID'", reply_markup=keyboard_admin)
        return
    user_id = int(args[1])
    if user_id == admin:
        logging.info(F"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!")
        return
    await ban_user(user_id, message.from_user.id)
    await message.reply(F"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω", reply_markup=keyboard_admin)
    
@r.message(Command('givement'))
async def givement_pol(message: Message):
    try:
        args = message.text.split()
        if len(args) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /givement <id –ø–æ–ª—É—á–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>. –ü—Ä–∏–º–µ—Ä: /givement <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> 100")

        receiver_id = int(args[1])
        amount = float(args[2])

        cursor.execute("UPDATE users SET money = money + ? WHERE user_id = ?", (amount, receiver_id))

        try:
            await bot.send_message(chat_id=receiver_id, text=f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}')
        except TelegramForbiddenError:
            print(f"Cannot send message to user {receiver_id}: This user is a bot")
        
        logging.info(f"–ü–µ—Ä–µ–≤–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º —Å ID: {message.from_user.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {receiver_id} –Ω–∞ —Å—É–º–º—É {amount} –¥–µ–Ω–µ–≥")

        conn.commit()
        await message.reply("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard_admin)

    except ValueError as ve:
        await message.reply(f"–û—à–∏–±–∫–∞: {ve}", reply_markup=keyboard_admin)
    except Exception as e:
        conn.rollback()
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            
@r.message(Command("mailing"))
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id == admin or admin2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\nüö®–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞", reply_markup=keyboard_admin)
        await state.set_state(BroadcastForm.waiting_for_message)
    else:
        await message.answer("üö®–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
@r.message(BroadcastForm.waiting_for_message, F.content_type == ContentType.TEXT)
async def get_broadcast_message(message: Message, state: FSMContext):
    broadcast_text = message.text
    
    if broadcast_text == "–æ—Ç–º–µ–Ω–∞" or broadcast_text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard_admin)
        await state.clear()
        return

    await broadcast_message(broadcast_text)
    
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=keyboard_admin)
    await state.clear()
    
@r.message(Command("get_users"))
async def get_users(message: Message):
    is_admin = await chek_is_admin(message.from_user.id)
    if is_admin == False:
        await message.reply("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    useri = await get_all_users()
    if useri:
        response = "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id, name, money, country, role in useri:
            response += f"user_id - {user_id}, name - {name}, country - {money}, role - {country}, money- {role}\n"
    await message.reply(f"{response}")
    
@r.message(Command("get_country"))
async def get_country(message: Message):
    user_id = message.from_user.id
    countries = await get_all_country_params()
    is_admin = await chek_is_admin(user_id)
    if is_admin == False:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω")
        return
    if countries:
        response = "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω:\n"
        for capital, name, economy, population, happiness, temp_rost in countries:
            response += f"capital - {capital}, name - {name}, economy - {economy}, population - {population}, happiness - {happiness}, temp_rost - {temp_rost}\n"
    await message.reply(f"{response}")

@r.message(Command("delete_country"))
async def delete_country(message: Message):
    try:
        args = message.text.split()
        if len(args)!= 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_country <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã>")

        name = args[1]

        cursor.execute("DELETE FROM countries WHERE name = ?", (name,))

        conn.commit()
        await message.reply(f"–°—Ç—Ä–∞–Ω–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=keyboard_admin)
    except ValueError as ve:
        await message.reply(f"–û—à–∏–±–∫–∞: {ve}", reply_markup=keyboard_admin)
           
@r.message(Command("create_country"))
async def create_country(message: Message):

    try:
        args = message.text.split()
        if len(args)!= 6:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_country <—Å—Ç–æ–ª–∏—Ü–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã> <—ç–∫–æ–Ω–æ–º–∏–∫–∞> <–Ω–∞—Å–µ–ª–µ–Ω–∏–µ> <—Å—á–∞—Å—Ç—å–µ> <—Ç–µ–º–ø —Ä–æ—Å—Ç–∞>")

        capital = args[1]
        name = args[2]
        economy = args[3]
        population = args[4]
        happiness = args[5]
        temp_rost = args[6]

        cursor.execute("INSERT INTO countries (capital, name, economy, population, happiness, temp_rost) VALUES (?, ?,?,?,?,?)", (capital, name, economy, population, happiness, temp_rost))
        await message.reply(f"–°—Ç—Ä–∞–Ω–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=keyboard_admin)

        conn.commit()
    except ValueError as ve:
        await message.reply(f"–û—à–∏–±–∫–∞: {ve}", reply_markup=keyboard_admin)
        
@r.message(Command("update_country"))
async def update_country(message: Message):
    try:
        args = message.text.split()
        if len(args)!= 7:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_country <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã> <—Å—Ç–æ–ª–∏—Ü–∞> <—ç–∫–æ–Ω–æ–º–∏–∫–∞> <–Ω–∞—Å–µ–ª–µ–Ω–∏–µ> <—Å—á–∞—Å—Ç—å–µ> <—Ç–µ–º–ø —Ä–æ—Å—Ç–∞>")
        chek_is_country = await get_country_params(args[1])
        if chek_is_country is None:
            await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        name = args[1]
        capital = args[2]
        economy = args[3]
        population = args[4]
        happiness = args[5]
        temp_rost = args[6]

        cursor.execute("UPDATE countries SET capital =?, economy =?, population =?, happiness =?, temp_rost =? WHERE name =?", (capital, economy, population, happiness, temp_rost, name))
        conn.commit()
        await message.reply(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞–Ω–µ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=keyboard_admin)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        
@r.message(Command('ban_admin'))
async def ban_admin(message: Message, state:FSMContext):
    if message.from_user.id == admin:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èü™™:")
        await state.set_state(Ban.id)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–∞!‚ùå")

    @r.message(Ban.id)
    async def ban_admin_True(message: Message, state: FSMContext):
        cursor.execute(f"SELECT user_id FROM admins WHERE user_id = {message.text}")
        a = cursor.fetchone()
        adma = a[0]
            
        if adma != None:
            cursor.execute(f"DELETE FROM admins WHERE user_id = {message.text}")
            connection.commit()
            await bot.send_message(message.text, f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.first_name}")
            await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!‚úÖ")
            await state.clear()
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—ÇüôÖ‚Äç‚ôÇÔ∏è")
    
# endregion