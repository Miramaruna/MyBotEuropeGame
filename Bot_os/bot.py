import sqlite3
import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN

from app.handlers import *
from app.keyboards import *
from app.DB import *

if not TOKEN:
    raise ValueError("TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
admin = 5626265763
admin2 = 45

# region start

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    name = State()
    country = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π /register, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n/help - –¥–ª—è –ø–æ–º–æ—â–∏")

# –ö–æ–º–∞–Ω–¥–∞ /register
@dp.message(Command("register"))
async def register(message: types.Message, state: FSMContext):
    await message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Registration.name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üåç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞: /countries")
    await state.set_state(Registration.country)

# –ö–æ–º–∞–Ω–¥–∞ /countries
@dp.message(Command("countries"))
async def choose_country(message: types.Message):
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM countries")
    countries = cursor.fetchall()
    conn.close()

    if countries:
        countries_list = "\n".join([f"üåé {country[0]}" for country in countries])
        await message.answer(f"üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:\n{countries_list}\n")
    else:
        await message.answer("‚ö† –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
@dp.message(Registration.country)
async def process_country(message: types.Message, state: FSMContext):
    country = message.text
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM countries WHERE name = ?", (country,))
    if cursor.fetchone():
        user_data = await state.get_data()
        user_id = message.from_user.id
        name = user_data['name']
        cursor.execute("""
            INSERT INTO users (user_id, name, country, role)
            VALUES (?, ?, ?, ?)
        """, (user_id, name, country, "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç"))
        conn.commit()
        conn.close()
        await message.answer(f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {country}! –¢–µ–ø–µ—Ä—å –≤—ã –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã! üèõ")
        await state.clear()
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        
# endregion

#region info

# –ö–æ–º–∞–Ω–¥–∞ /info
@dp.message(Command("info"))
async def show_info(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, country, role FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        name, country, role = user
        await message.answer(f"üÜî –ò–º—è: {name}\nüåç –°—Ç—Ä–∞–Ω–∞: {country}\nüèÖ –†–æ–ª—å: {role}")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")

# –ö–æ–º–∞–Ω–¥–∞ /country_info
@dp.message(Command("country_info"))
async def show_country_info(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("game.db")
    cursor = conn.cursor()
    cursor.execute("SELECT country FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user:
        country = user[0]
        cursor.execute("SELECT economy, population, happiness FROM countries WHERE name = ?", (country,))
        country_info = cursor.fetchone()
        conn.close()
        if country_info:
            economy, population, happiness = country_info
            await message.answer(f"üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ {country}:\nüí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞: {economy}\nüë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population}\nüòä –°—á–∞—Å—Ç—å–µ: {happiness}%")
        else:
            await message.answer("‚ö† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
        conn.close()
        
#endregion

async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    dp.include_router(r)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üö´ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")