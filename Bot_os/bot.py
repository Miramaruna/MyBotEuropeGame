# region imports

import sqlite3
import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN

from app.handlers import *
from app.keyboards import *
from app.DB import *
from app.imports import *
from app.methods import *
from app.states import *

if not TOKEN:
    raise ValueError("üö® TOKEN environment variable is not set")

# endregion

# region config

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
admin = 5626265763
admin2 = 45

# endregion

# region start

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π /register, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n/help - –¥–ª—è –ø–æ–º–æ—â–∏", reply_markup=keyboard_start)

@dp.message(Command("register"))
async def register(message: types.Message, state: FSMContext):
    await message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\nüö´–û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∞")
    await state.set_state(Registration.name)

@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    try:
        user = await chek_is_user(message.from_user.id)
    except Exception as e:
        logging.info(F"üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {message.from_user.id}")
        
    if message.text.startswith("/"):
        await message.answer("‚ùå–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
        await state.clear()
        return
    
    if user == False:
        if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            return
        await state.update_data(name=message.text)
        await message.answer("üåç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞: /countries")
        await state.set_state(Registration.country)
    else:
        user = await get_user_params(message.from_user.id)
        await message.answer(f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user[0]}!")
        await state.clear()

@dp.message(Command("countries"))
async def choose_country(message: types.Message):
    cursor.execute("SELECT name FROM countries")
    countries = cursor.fetchall()

    if countries:
        countries_list = "\n".join([f"üåé {country[0]}" for country in countries])
        await message.answer(f"üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:\n{countries_list}\n", reply_markup=keyboard_start)
    else:
        await message.answer("‚ö† –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(Registration.country)
async def process_country(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return
    country = message.text
    cursor.execute("SELECT name FROM countries WHERE name = ?", (country,))
    if cursor.fetchone():
        user_data = await state.get_data()
        user_id = message.from_user.id
        cursor.execute('SELECT country FROM users WHERE country=?', (country,))
        is_country = cursor.fetchone()
        if is_country is None:
            name = user_data['name']
            cursor.execute("""
                INSERT INTO users (user_id, name, country, role)
                VALUES (?, ?, ?, ?)
            """, (user_id, name, country, "üèõ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç"))
            conn.commit()
            await message.answer(f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {country}! –¢–µ–ø–µ—Ä—å –≤—ã –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã! üèõ")
        else:
            name = user_data['name']
            cursor.execute("""
                INSERT INTO users (user_id, name, country, role)
                VALUES (?, ?, ?, ?)
            """, (user_id, name, country, "üë§ –ñ–∏—Ç–µ–ª—å"))
            conn.commit()
            await message.answer(f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {country}! –¢–µ–ø–µ—Ä—å –≤—ã –ñ–∏—Ç–µ–ª—å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã! üë§")
        logging.info(F"‚úÖ –ë—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:{message.from_user.id}")
        await state.clear()
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
# endregion

# region info

@dp.message(Command("info"))
async def show_info(message: types.Message):
    user = message.from_user.id
    is_user = await chek_is_user(user)
    if is_user == False:
        await message.reply("‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    user_params = await get_user_params(user)
    cursor.execute("SELECT * FROM wars WHERE country1 = ? OR country2 = ?", (message.from_user.id, message.from_user.id))
    wars = cursor.fetchone()
    if wars != None:
        country1_name = await get_country_from_users(user)
        country2_name = await get_country_from_users(wars[2])    
    
    if user_params:
        name, country, role, money = user_params
        await message.answer(f"üÜî –ò–º—è: {name}\nüåç –°—Ç—Ä–∞–Ω–∞: {country}\nüèÖ –†–æ–ª—å: {role}\nüíµ –î–µ–Ω—å–≥–∏ : {money}", reply_markup=keyboard_start)
    else:
        await message.answer("‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    if wars:
        id, country1, country2, result = wars
        await message.answer(f"‚öîÔ∏è –°—Ä–∞–∂–µ–Ω–∏—è:\nÔ∏è üè≥Ô∏è –°—Ç—Ä–∞–Ω–∞ 1: {country1_name}\nÔ∏è üè≥Ô∏è –°—Ç—Ä–∞–Ω–∞ 2: {country2_name}\nüèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=keyboard_start)
    else:
        await message.answer("‚öîÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ä–∞–∂–µ–Ω–∏—è.")
        
@dp.message(Command("country_info"))
async def show_country_info(message: types.Message):
    user_id = message.from_user.id
    is_user = await chek_is_user(user_id)
    if is_user:
        country_name = await get_country_from_users(user_id)
        country = await get_country_params(country=country_name)
        if country:
            name, capital, economy, population, happiness, temp_rost, *rest = country

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            economy = f"{float(economy):.2f}"
            population = f"{float(population):.2f}"
            happiness = f"{float(happiness):.2f}"
            temp_rost = f"{float(temp_rost):.2f}"

            await message.answer(
                f"üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ {name}:\n"
                f"üèõ –°—Ç–æ–ª–∏—Ü–∞: {capital}\n"
                f"üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞: {economy}\n"
                f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population}\n"
                f"üòä –°—á–∞—Å—Ç—å–µ: {happiness}\n"
                f"üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞: {temp_rost}%",
                reply_markup=keyboard_countries_methods
            )
        else:
            await message.answer("‚ö† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
        
@dp.message(Command("info_bot"))
async def show_info_bot(message: Message):
    await message.answer("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n‚öôÔ∏è –í–µ—Ä—Å–∏—è: 1.1.5\nüêç –Ø–∑—ã–∫: Python\nüíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Sqlite3\nüïπ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Miramar\nüîó Github: https://github.com/Miramaruna/MyBotEuropeGame", reply_markup=keyboard_start)
    
# endregion

# region main
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    dp.include_router(r)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üö´ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
# endregion
